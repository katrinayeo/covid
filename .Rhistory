paste (" MSE that's Error of Forecasting for ", validation_data_days, " days in holt Model for  ==> ", y_lab, sep=" ")
paste(MSE_Mean_All.Holt,"%")
paste ("MSE that's Error of Forecasting day by day for ", validation_data_days, " days in holt Model for  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_NNAR=tail(forecasting_NNAR$mean, N_forecasting_days))), type = "rest")
# Summary Table for MSE for all models
best_recommended_model <- min(MSE_Mean_All_NNAR, MSE_Mean_All.bats_Model, MSE_Mean_All.TBATS_Model, MSE_Mean_All.Holt_Model, MSE_Mean_All.ARIMA_Model, MSE_Mean_All.VAR)
paste("Choosing the best model based on MSE of forecasts by using NNAR, BATS, TBATS, Holt's Linear Model, ARIMA and VAR for ", y_lab, sep=" ")
best_recommended_model
x1<-if(best_recommended_model >= MSE_Mean_All.bats_Model) {paste("BATS Model")}
x2<-if(best_recommended_model >= MSE_Mean_All.TBATS_Model) {paste("TBATS Model")}
x3<-if(best_recommended_model >= MSE_Mean_All.Holt_Model) {paste("Holt Model")}
x4<-if(best_recommended_model >= MSE_Mean_All.ARIMA_Model) {paste("ARIMA Model")}
x5<-if(best_recommended_model >= MSE_Mean_All_NNAR) {paste("NNAR Model")}
x6<-if(best_recommended_model >= MSE_Mean_All.VAR) {paste("VAR Model")}
panderOptions('table.split.table', Inf)
paste("Forecasting by using BATS Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_bats=tail(forecasting_bats$mean, N_forecasting_days), lower=tail(forecasting_bats$lower,N_forecasting_days), Upper=tail(forecasting_bats$lower,N_forecasting_days))), type = "rest")
paste("Forecasting by using TBATS Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_TBATS=tail(forecasting_tbats$mean, N_forecasting_days), Lower=tail(forecasting_tbats$lower,N_forecasting_days), Upper=tail(forecasting_tbats$upper,N_forecasting_days))), type = "rest")
paste("Forecasting by using Holt's Linear Trend Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_holt=tail(forecasting_holt$mean, N_forecasting_days), Lower=tail(forecasting_holt$lower,N_forecasting_days), Upper=tail(forecasting_holt$upper,N_forecasting_days))), type = "rest")
paste("Forecasting by using ARIMA Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_auto.arima=tail(forecasting_auto_arima$mean, N_forecasting_days), Lower=tail(forecasting_auto_arima$lower, N_forecasting_days), Upper=tail(forecasting_auto_arima$upper, N_forecasting_days))), type = "rest")
paste("Forecasting by using VAR Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_VAR=tail(forecasting_VAR$mean, N_forecasting_days), Lower=tail(forecasting_VAR$lower, N_forecasting_days), Upper=tail(forecasting_VAR$upper, N_forecasting_days))), type = "rest")
paste("Forecasting by using NNAR Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_NNAR=tail(forecasting_NNAR$mean, N_forecasting_days))), type = "rest")
result<-c(x1, x2, x3, x4, x5, x6)
table.error<-data.frame(country.name, NNAR.model=MSE_Mean_All_NNAR, BATS.Model=MSE_Mean_All.bats_Model, TBATS.Model=MSE_Mean_All.TBATS_Model, Holt.Model=MSE_Mean_All.Holt_Model, ARIMA.Model=MSE_Mean_All.ARIMA_Model, VAR.Model=MSE_Mean_All.VAR,   Best.Model=result)
print(ascii(table(table.error)), type = "rest")
MSE.Value<-c(MSE_Mean_All_NNAR, MSE_Mean_All.bats_Model, MSE_Mean_All.TBATS_Model, MSE_Mean_All.Holt_Model, MSE_Mean_All.ARIMA_Model, MSE_Mean_All_VAR)
Model<-c("NNAR.model","BATS.Model","TBATS.Model","Holt.Model","ARIMA.Model" , "VAR Model")
channel_data<-data.frame(Model,MSE.Value)
# Normally, the entire expression below would be assigned to an object, but we're
# going bare bones here.
ggplot(channel_data, aes(x = Model, y = MSE.Value)) +
geom_bar(stat = "identity") +
geom_text(aes(label = MSE.Value)) +  # x AND y INHERITED. WE JUST NEED TO SPECIFY "label"
coord_flip() +
scale_y_continuous(expand = c(0, 0))
library(urca)
library(vars)
# Adapted and modified from Epidemic.TA in
# System for Forecasting COVID-19 Cases Using Time-Series and Neural Networks Models
install.packages("vars")
library(vars)
SGData.VAR.IC <- VARselect(SGData, type= const)
#VECM Model
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
#VAR model
DNC <- read_excel("formated_data.xlsx", sheet = "Daily New Cases")
SGDNC<-DNC$Singapore
UKDNC<-DNC$`United Kingdom`
USDNC<-DNC$`United States`
#Loading Monthly Unemployment Rate Data
MUR <- read_excel("formated_data.xlsx", sheet = "Monthly Unemployment Rate")
SGMUR<-MUR$Singapore
UKMUR<-MUR$`United Kingdom`
USMUR<-MUR$`United States`
#Loading Government Response Index Data
GRI <- read_excel("formated_data.xlsx", sheet = "Government Response Index")
SGGRI<-GRI$Singapore
UKGRI<-GRI$`United Kingdom`
USGRI<-GRI$`United States`
#Loading Containment Health Index Data
CHI <- read_excel("formated_data.xlsx", sheet = "Containment Health Index")
SGCHI<-CHI$Singapore
UKCHI<-CHI$`United Kingdom`
USCHI<-CHI$`United States`
#Loading Economic Support Index Data
ESI <- read_excel("formated_data.xlsx", sheet = "Economic Support Index")
SGESI<-ESI$Singapore
UKESI<-ESI$`United Kingdom`
USESI<-ESI$`United States`
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
SGDNC<-DNC$Singapore[1:158]
UKDNC<-DNC$`United Kingdom`
USDNC<-DNC$`United States`
#Loading Monthly Unemployment Rate Data
MUR <- read_excel("formated_data.xlsx", sheet = "Monthly Unemployment Rate")
SGMUR<-MUR$Singapore
UKMUR<-MUR$`United Kingdom`
USMUR<-MUR$`United States`
#Loading Government Response Index Data
GRI <- read_excel("formated_data.xlsx", sheet = "Government Response Index")
SGGRI<-GRI$Singapore
UKGRI<-GRI$`United Kingdom`
USGRI<-GRI$`United States`
#Loading Containment Health Index Data
CHI <- read_excel("formated_data.xlsx", sheet = "Containment Health Index")
SGCHI<-CHI$Singapore
UKCHI<-CHI$`United Kingdom`
USCHI<-CHI$`United States`
#Loading Economic Support Index Data
ESI <- read_excel("formated_data.xlsx", sheet = "Economic Support Index")
SGESI<-ESI$Singapore
UKESI<-ESI$`United Kingdom`
USESI<-ESI$`United States`
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
SGDNC<-DNC$Singapore[1:517]
UKDNC<-DNC$`United Kingdom`[1:517]
USDNC<-DNC$`United States`[1:517]
#Loading Monthly Unemployment Rate Data
MUR <- read_excel("formated_data.xlsx", sheet = "Monthly Unemployment Rate")
SGMUR<-MUR$Singapore
UKMUR<-MUR$`United Kingdom`
USMUR<-MUR$`United States`
#Loading Government Response Index Data
GRI <- read_excel("formated_data.xlsx", sheet = "Government Response Index")
SGGRI<-GRI$Singapore
UKGRI<-GRI$`United Kingdom`
USGRI<-GRI$`United States`
#Loading Containment Health Index Data
CHI <- read_excel("formated_data.xlsx", sheet = "Containment Health Index")
SGCHI<-CHI$Singapore
UKCHI<-CHI$`United Kingdom`
USCHI<-CHI$`United States`
#Loading Economic Support Index Data
ESI <- read_excel("formated_data.xlsx", sheet = "Economic Support Index")
SGESI<-ESI$Singapore
UKESI<-ESI$`United Kingdom`
USESI<-ESI$`United States`
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
diff_SGdata = diff(SGdata)
dim(diff_SGdata)
#processing on data (input data)
rows <- NROW(diff_SGdata) # calculate number of rows in time series (number of days)
MTSplot(training_data)
ccm(training_data)
m0=VARorder(training_data)
m0$Mstat
names(m0)
m1=VAR(training_data,8)
m2=refVAR(m1,thres=1.96)
MTSdiag(m1,adj=12)
validation_forecast<-VARpred(m1, validation_data_days)
forecasting_VAR <- VARpred(m1, N_forecasting_days+validation_data_days)
MSE_Per_Day<-round((testing_data[, 1]-validation_forecast$pred[, 1])^2, 3)
paste ("MSE for ",validation_data_days,frequency,"by using VAR Model for  ==> ",y_lab, sep=" ")
MSE_Mean_All.VAR<-paste(round(mean(MSE_Per_Day),3)," MSE ",validation_data_days,frequency,y_lab,sep=" ")
MSE_Mean_All.VAR<-round(mean(MSE_Per_Day),3)
MSE_VAR<-paste(round(MSE_Per_Day,3))
MSE_VAR_Model<-paste(MSE_Per_Day )
paste ("MSE Error of Forecasting for ",validation_data_days," days in VAR Model for  ==> ",y_lab, sep=" ")
paste(MSE_Mean_All,"%")
paste ("MSE Error of Forecasting day by day for ",validation_data_days," days in VAR Model for  ==> ",y_lab, sep=" ")
print(ascii(data.frame(date_VAR=validation_dates,validation_data_by_name,actual_data=testing_data[, 1],forecasting_VAR=validation_forecast$pred[, 1], MSE_VAR_Model)), type = "rest")
print(ascii(data.frame(FD, forecating_date=forecasting_data_by_name, forecasting_by_VAR=tail(forecasting_VAR$pred[, 1], N_forecasting_days))), type = "rest")
plot(forecasting_VAR$pred[,1],xlab = paste ("Time in", frequency, y_lab, sep=" "), ylab=y_lab)
x1_test <- ts(testing_data, start = testing_data_start_index )
lines(x1_test, col='red',lwd=1)
graph5<-autoplot(forecasting_VAR, xlab = paste ("Time in", frequency, y_lab, sep=" "), ylab=y_lab)
graph5
MSE_Mean_All.VAR
colMeans(training_data)
sqrt(apply(training_data,2,var))
#VECM Model
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
SGData.VAR.IC <- VARselect(SGData, type= const)
# Summary Table for MSE for all models
best_recommended_model <- min(MSE_Mean_All_NNAR, MSE_Mean_All.bats_Model, MSE_Mean_All.TBATS_Model, MSE_Mean_All.Holt_Model, MSE_Mean_All.ARIMA_Model, MSE_Mean_All.VAR)
paste("Choosing the best model based on MSE of forecasts by using NNAR, BATS, TBATS, Holt's Linear Model, ARIMA and VAR for ", y_lab, sep=" ")
best_recommended_model
x1<-if(best_recommended_model >= MSE_Mean_All.bats_Model) {paste("BATS Model")}
x2<-if(best_recommended_model >= MSE_Mean_All.TBATS_Model) {paste("TBATS Model")}
x3<-if(best_recommended_model >= MSE_Mean_All.Holt_Model) {paste("Holt Model")}
x4<-if(best_recommended_model >= MSE_Mean_All.ARIMA_Model) {paste("ARIMA Model")}
x5<-if(best_recommended_model >= MSE_Mean_All_NNAR) {paste("NNAR Model")}
x6<-if(best_recommended_model >= MSE_Mean_All.VAR) {paste("VAR Model")}
panderOptions('table.split.table', Inf)
paste("Forecasting by using BATS Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_bats=tail(forecasting_bats$mean, N_forecasting_days), lower=tail(forecasting_bats$lower,N_forecasting_days), Upper=tail(forecasting_bats$lower,N_forecasting_days))), type = "rest")
paste("Forecasting by using TBATS Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_TBATS=tail(forecasting_tbats$mean, N_forecasting_days), Lower=tail(forecasting_tbats$lower,N_forecasting_days), Upper=tail(forecasting_tbats$upper,N_forecasting_days))), type = "rest")
paste("Forecasting by using Holt's Linear Trend Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_holt=tail(forecasting_holt$mean, N_forecasting_days), Lower=tail(forecasting_holt$lower,N_forecasting_days), Upper=tail(forecasting_holt$upper,N_forecasting_days))), type = "rest")
paste("Forecasting by using ARIMA Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_auto.arima=tail(forecasting_auto_arima$mean, N_forecasting_days), Lower=tail(forecasting_auto_arima$lower, N_forecasting_days), Upper=tail(forecasting_auto_arima$upper, N_forecasting_days))), type = "rest")
paste("Forecasting by using VAR Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_VAR=tail(forecasting_VAR$mean, N_forecasting_days), Lower=tail(forecasting_VAR$lower, N_forecasting_days), Upper=tail(forecasting_VAR$upper, N_forecasting_days))), type = "rest")
paste("Forecasting by using NNAR Model  ==> ", y_lab, sep=" ")
print(ascii(data.frame(FD,forecasting_date=forecasting_data_by_name, forecasting_by_NNAR=tail(forecasting_NNAR$mean, N_forecasting_days))), type = "rest")
result<-c(x1, x2, x3, x4, x5, x6)
table.error<-data.frame(country.name, NNAR.model=MSE_Mean_All_NNAR, BATS.Model=MSE_Mean_All.bats_Model, TBATS.Model=MSE_Mean_All.TBATS_Model, Holt.Model=MSE_Mean_All.Holt_Model, ARIMA.Model=MSE_Mean_All.ARIMA_Model, VAR.Model=MSE_Mean_All.VAR,   Best.Model=result)
print(ascii(table(table.error)), type = "rest")
MSE.Value<-c(MSE_Mean_All_NNAR, MSE_Mean_All.bats_Model, MSE_Mean_All.TBATS_Model, MSE_Mean_All.Holt_Model, MSE_Mean_All.ARIMA_Model, MSE_Mean_All_VAR)
Model<-c("NNAR.model","BATS.Model","TBATS.Model","Holt.Model","ARIMA.Model" , "VAR Model")
channel_data<-data.frame(Model,MSE.Value)
# Normally, the entire expression below would be assigned to an object, but we're
# going bare bones here.
ggplot(channel_data, aes(x = Model, y = MSE.Value)) +
geom_bar(stat = "identity") +
geom_text(aes(label = MSE.Value)) +  # x AND y INHERITED. WE JUST NEED TO SPECIFY "label"
coord_flip() +
scale_y_continuous(expand = c(0, 0))
message("System finished Modelling and Forecasting  by using BATS, TBATS, Holt's Linear Trend, and ARIMA Model ==>",y_lab, sep=" ")
message(" Thank you for using our System For Modelling and Forecasting ==> ", y_lab, sep=" ")
print(ascii(table(table.error)), type = "rest")
MSE.Value<-c(MSE_Mean_All_NNAR, MSE_Mean_All.bats_Model, MSE_Mean_All.TBATS_Model, MSE_Mean_All.Holt_Model, MSE_Mean_All.ARIMA_Model, MSE_Mean_All_VAR)
Model<-c("NNAR.model","BATS.Model","TBATS.Model","Holt.Model","ARIMA.Model" , "VAR Model")
channel_data<-data.frame(Model,MSE.Value)
# Normally, the entire expression below would be assigned to an object, but we're
# going bare bones here.
ggplot(channel_data, aes(x = Model, y = MSE.Value)) +
geom_bar(stat = "identity") +
geom_text(aes(label = MSE.Value)) +  # x AND y INHERITED. WE JUST NEED TO SPECIFY "label"
coord_flip() +
scale_y_continuous(expand = c(0, 0))
#VECM Model
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
SGData.VAR.IC <- VARselect(SGData, type= const)
SGData.VAR.IC <- VARselect(SGData)
res = ca.jo(SGData)
# Adapted and modified from Epidemic.TA in
# System for Forecasting COVID-19 Cases Using Time-Series and Neural Networks Models
install.packages("vars")
library(urca)
library(vars)
SGData.VAR <- VARselect(SGData)
#VECM Model
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
SGData.VAR <- VARselect(SGData)
SGData.VAR <- VARselect(SGdata)
SGdata.VAR <- VARselect(SGdata)
nlags <- SGdata.VAR$selection(SC(n))
nlags <- SGdata.VAR$selection("SC(n)")
nlags <- SGdata.VAR$selection["SC(n)"]
nlags
#Perform cointegration test
SGdata.CA <- ca.jo(y, ecdet="const", type="trace", K=nlags, spec="transitory")
summary(SGdata.CA)
#Perform cointegration test
SGdata.CA <- ca.jo(y, ecdet="const", type="trace", K=nlags, spec="transitory")
summary(SGdata.CA)
#Perform cointegration test
SGdata.CA <- ca.jo(SGdata, ecdet="const", type="trace", K=nlags, spec="transitory")
summary(SGdata.CA)
#Convert from VCEM to VAR model
source("vec2varX.r")
y.VAR <- vec2varX(y.CA, r=1)
#Convert from VCEM to VAR model
SGdata.VAR_convert <- vec2var(SGdata.CA, r=1)
#Convert from VCEM to VAR model
SGdata.VAR_convert <- vec2varX(SGdata.CA, r=1)
SGdata.VAR.rest <- vec2var(SGdata.CA, A=rest.alpha, r=1)
validation_forecast<-predict(SGdata.VAR.convert, n.head=validation_data_days, ci=0.95)
#Convert from VCEM to VAR model
SGdata.VAR_convert <- vec2var(SGdata.CA, r=1)
validation_forecast<-predict(SGdata.VAR.convert, n.head=validation_data_days, ci=0.95)
#Convert from VCEM to VAR model
SGdata.VAR_convert <- vec2var(SGdata.CA, r=1)
validation_forecast<-predict(SGdata.VAR.convert, n.head=validation_data_days, ci=0.95)
validation_forecast<-predict(SGdata.VAR.convert, n.head=validation_data_days, ci=0.95)
#Convert from VCEM to VAR model
SGdata.VAR_convert <- vec2var(SGdata.CA, r=1)
validation_forecast<-predict(SGdata.VAR.convert, validation_data_days)
validation_forecast<-predict(SGdata.VAR_convert, validation_data_days)
forecasting_VAR <- predict(SGdata.VAR_convert, N_forecasting_days+validation_data_days)
MSE_Per_Day<-round((testing_data[, 1]-validation_forecast$pred[, 1])^2, 3)
paste ("MSE for ",validation_data_days,frequency,"by using VECM Model for  ==> ",y_lab, sep=" ")
MSE_Mean_All.VECM<-paste(round(mean(MSE_Per_Day),3)," MSE ",validation_data_days,frequency,y_lab,sep=" ")
MSE_Mean_All.VECM<-round(mean(MSE_Per_Day),3)
MSE_VECM<-paste(round(MSE_Per_Day,3))
MSE_VECM_Model<-paste(MSE_Per_Day )
paste ("MSE Error of Forecasting for ",validation_data_days," days in VAR Model for  ==> ",y_lab, sep=" ")
MSE_Per_Day<-round((testing_data[, 1]-validation_forecast$pred[, 1])^2, 3)
setwd("C:/Users/Tong/Desktop/FE5209/covid")
library(fpp2)
library(ggplot2)
library("readxl")
library(moments)
library(forecast)
require(forecast)
library(tseries)
require(tseries)
require(markovchain)
require(data.table)
library(Hmisc)
library(ascii)
library(pander)
library(urca)
library(vars)
library("MTS")
#VAR model
DNC <- read_excel("formated_data.xlsx", sheet = "Daily New Cases")
SGDNC<-DNC$Singapore[1:517]
UKDNC<-DNC$`United Kingdom`[1:517]
USDNC<-DNC$`United States`[1:517]
#Loading Monthly Unemployment Rate Data
MUR <- read_excel("formated_data.xlsx", sheet = "Monthly Unemployment Rate")
SGMUR<-MUR$Singapore[1:517]
UKMUR<-MUR$`United Kingdom`[1:517]
USMUR<-MUR$`United States`[1:517]
#Loading Government Response Index Data
GRI <- read_excel("formated_data.xlsx", sheet = "Government Response Index")
SGGRI<-GRI$Singapore[1:517]
UKGRI<-GRI$`United Kingdom`[1:517]
USGRI<-GRI$`United States`[1:517]
#Loading Containment Health Index Data
CHI <- read_excel("formated_data.xlsx", sheet = "Containment Health Index")
SGCHI<-CHI$Singapore[1:517]
UKCHI<-CHI$`United Kingdom`[1:517]
USCHI<-CHI$`United States`[1:517]
#Loading Economic Support Index Data
ESI <- read_excel("formated_data.xlsx", sheet = "Economic Support Index")
SGESI<-ESI$Singapore[1:517]
UKESI<-ESI$`United Kingdom`[1:517]
USESI<-ESI$`United States`[1:517]
# Data prep for VAR and VECM models
jun_actual_data<-original_data[518:547]
jul_actual_data<-original_data[548:578]
aug_actual_data<-original_data[579:609]
sep_actual_data<-original_data[610:639]
jun_forecast_input<-training_data
jul_forecast_input<-c(jun_forecast_input, jun_actual_data)
aug_forecast_input<-c(jul_forecast_input, jul_actual_data)
sep_forecast_input<-c(aug_forecast_input, aug_actual_data)
oct_forecast_input<-c(sep_forecast_input, sep_actual_data)
forecast_input_list<-list(jun_forecast_input, jul_forecast_input, aug_forecast_input, sep_forecast_input)
actual_data_list<-list(jun_actual_data, jul_actual_data, aug_actual_data, sep_actual_data)
# Data prep for VAR and VECM models
jun_actual_data<-cbind(DNC$Singapore[518:547], MUR$Singapore[518:547]. GRI$Singapore[518:547], CHI$Singapore[518:547], ESI$Singapore[518:547])
# Data prep for VAR and VECM models
jun_actual_data<-cbind(DNC$Singapore[518:547], MUR$Singapore[518:547]. GRI$Singapore[518:547], CHI$Singapore[518:547], ESI$Singapore[518:547])
# Data prep for VAR and VECM models
jun_actual_data<-cbind(DNC$Singapore[518:547], MUR$Singapore[518:547], GRI$Singapore[518:547], CHI$Singapore[518:547], ESI$Singapore[518:547])
jul_actual_data<-cbind(DNC$United Kingdom[548:578], MUR$United Kingdom[548:578], GRI$United Kingdom[548:578], CHI$United Kingdom[548:578], ESI$United Kingdom[548:578])
aug_actual_data<-cbind(DNC$Singapore[579:609], MUR$Singapore[579:609], GRI$Singapore[579:609], CHI$Singapore[579:609], ESI$Singapore[579:609])
sep_actual_data<-cbind(DNC$Singapore[610:639], MUR$Singapore[610:639], GRI$Singapore[610:639], CHI$Singapore[610:639], ESI$Singapore[610:639])
temp_model<-VAR(input_data, k=nlags) # temp_model<- #Reuse existing var model here
# Testing Data Evaluation
for (i in 1:4){
input_data<-forecast_input_list[i][[1]]
SGdata.VAR <- VARselect(SGdata) #determining number of lags to be included in VAR model
nlags <- SGdata.VAR$selection["SC(n)"]
temp_model<-VAR(input_data, k=nlags) # temp_model<- #Reuse existing var model here
actual_data<-actual_data_list[i][[1]]
one_month_ahead_forecast <- predict(temp_model, h=NROW(actual_data))
sse<-(actual_data-one_month_ahead_forecast$mean)^2
plot(c(input_data, one_month_ahead_forecast$mean),xlab = paste ("Time in", frequency ,y_lab , sep=" "), ylab=y_lab, type='l')
x1_test <- ts(actual_data, start=NROW(input_data)+1 )
lines(x1_test, col='red',lwd=2)
sse_vec<-c(sse_vec, sse)
}
#VAR model
DNC <- read_excel("formated_data.xlsx", sheet = "Daily New Cases")
SGDNC<-DNC$Singapore[1:517]
UKDNC<-DNC$`United Kingdom`[1:517]
USDNC<-DNC$`United States`[1:517]
#Loading Monthly Unemployment Rate Data
MUR <- read_excel("formated_data.xlsx", sheet = "Monthly Unemployment Rate")
SGMUR<-MUR$Singapore[1:517]
UKMUR<-MUR$`United Kingdom`[1:517]
USMUR<-MUR$`United States`[1:517]
#Loading Government Response Index Data
GRI <- read_excel("formated_data.xlsx", sheet = "Government Response Index")
SGGRI<-GRI$Singapore[1:517]
UKGRI<-GRI$`United Kingdom`[1:517]
USGRI<-GRI$`United States`[1:517]
#Loading Containment Health Index Data
CHI <- read_excel("formated_data.xlsx", sheet = "Containment Health Index")
SGCHI<-CHI$Singapore[1:517]
UKCHI<-CHI$`United Kingdom`[1:517]
USCHI<-CHI$`United States`[1:517]
#Loading Economic Support Index Data
ESI <- read_excel("formated_data.xlsx", sheet = "Economic Support Index")
SGESI<-ESI$Singapore[1:517]
UKESI<-ESI$`United Kingdom`[1:517]
USESI<-ESI$`United States`[1:517]
# Data prep for VAR and VECM models
jun_actual_data<-cbind(DNC$Singapore[518:547], MUR$Singapore[518:547], GRI$Singapore[518:547], CHI$Singapore[518:547], ESI$Singapore[518:547])
jul_actual_data<-cbind(DNC$Singapore[548:578], MUR$Singapore[548:578], GRI$Singapore[548:578], CHI$Singapore[548:578], ESI$Singapore[548:578])
aug_actual_data<-cbind(DNC$Singapore[579:609], MUR$Singapore[579:609], GRI$Singapore[579:609], CHI$Singapore[579:609], ESI$Singapore[579:609])
sep_actual_data<-cbind(DNC$Singapore[610:639], MUR$Singapore[610:639], GRI$Singapore[610:639], CHI$Singapore[610:639], ESI$Singapore[610:639])
jun_forecast_input<-training_data
jul_forecast_input<-c(jun_forecast_input, jun_actual_data)
aug_forecast_input<-c(jul_forecast_input, jul_actual_data)
sep_forecast_input<-c(aug_forecast_input, aug_actual_data)
oct_forecast_input<-c(sep_forecast_input, sep_actual_data)
forecast_input_list<-list(jun_forecast_input, jul_forecast_input, aug_forecast_input, sep_forecast_input)
actual_data_list<-list(jun_actual_data, jul_actual_data, aug_actual_data, sep_actual_data)
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
diff_SGdata = diff(SGdata)
dim(diff_SGdata)
#processing on data (input data)
rows <- NROW(diff_SGdata) # calculate number of rows in time series (number of days)
training_data<-diff_SGdata
MTSplot(training_data)
ccm(training_data)
m0$Mstat
names(m0)
m1=VAR(training_data, 8)
m2=refVAR(m1,thres=1.96)
MTSdiag(m1,adj=12)
# Testing Data Evaluation
for (i in 1:4){
input_data<-forecast_input_list[i][[1]]
SGdata.VAR <- VARselect(SGdata) #determining number of lags to be included in VAR model
nlags <- SGdata.VAR$selection["SC(n)"]
temp_model<-VAR(input_data, k=nlags) # temp_model<- #Reuse existing var model here
actual_data<-actual_data_list[i][[1]]
one_month_ahead_forecast <- predict(temp_model, h=NROW(actual_data))
sse<-(actual_data-one_month_ahead_forecast$mean)^2
plot(c(input_data, one_month_ahead_forecast$mean),xlab = paste ("Time in", frequency ,y_lab , sep=" "), ylab=y_lab, type='l')
x1_test <- ts(actual_data, start=NROW(input_data)+1 )
lines(x1_test, col='red',lwd=2)
sse_vec<-c(sse_vec, sse)
}
temp_model<-VAR(input_data, nlags) # temp_model<- #Reuse existing var model here
nlags
temp_model<-VAR(input_data, k=nlags) # temp_model<- #Reuse existing var model here
temp_model<-VAR(input_data, 2) # temp_model<- #Reuse existing var model here
input_data<-forecast_input_list[i][[1]]
SGdata.VAR <- VARselect(SGdata) #determining number of lags to be included in VAR model
nlags <- SGdata.VAR$selection["SC(n)"]
temp_model<-VAR(input_data, 2) # temp_model<- #Reuse existing var model here
jun_forecast_input<-cbind(DNC$Singapore[1:517], MUR$Singapore[1:517], GRI$Singapore[1:517], CHI$Singapore[1:517], ESI$Singapore[1:517])
jul_forecast_input<-c(jun_forecast_input, jun_actual_data)
aug_forecast_input<-c(jul_forecast_input, jul_actual_data)
sep_forecast_input<-c(aug_forecast_input, aug_actual_data)
oct_forecast_input<-c(sep_forecast_input, sep_actual_data)
forecast_input_list<-list(jun_forecast_input, jul_forecast_input, aug_forecast_input, sep_forecast_input)
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
diff_SGdata = diff(SGdata)
dim(diff_SGdata)
#processing on data (input data)
rows <- NROW(diff_SGdata) # calculate number of rows in time series (number of days)
training_data<-diff_SGdata
MTSplot(training_data)
ccm(training_data)
m0$Mstat
names(m0)
m0=VARorder(training_data)
m0$Mstat
names(m0)
m1=VAR(training_data, 8)
m2=refVAR(m1,thres=1.96)
MTSdiag(m1,adj=12)
# Testing Data Evaluation
for (i in 1:4){
input_data<-forecast_input_list[i][[1]]
SGdata.VAR <- VARselect(SGdata) #determining number of lags to be included in VAR model
nlags <- SGdata.VAR$selection["SC(n)"]
temp_model<-VAR(input_data, 2) # temp_model<- #Reuse existing var model here
actual_data<-actual_data_list[i][[1]]
one_month_ahead_forecast <- predict(temp_model, h=NROW(actual_data))
sse<-(actual_data-one_month_ahead_forecast$mean)^2
plot(c(input_data, one_month_ahead_forecast$mean),xlab = paste ("Time in", frequency ,y_lab , sep=" "), ylab=y_lab, type='l')
x1_test <- ts(actual_data, start=NROW(input_data)+1 )
lines(x1_test, col='red',lwd=2)
sse_vec<-c(sse_vec, sse)
}
MSE_Per_Day<-round(mean(sse_vec), 3)
#TODO: DAVID
sse_vec<-c()
sse_vec<-c(sse_vec, sse)
sse<-(actual_data-one_month_ahead_forecast$mean)^2
# Testing Data Evaluation
for (i in 1:4){
input_data<-forecast_input_list[i][[1]]
SGdata.VAR <- VARselect(SGdata) #determining number of lags to be included in VAR model
nlags <- SGdata.VAR$selection["SC(n)"]
temp_model<-VAR(input_data, 2) # temp_model<- #Reuse existing var model here
actual_data<-actual_data_list[i][[1]]
one_month_ahead_forecast <- predict(temp_model, h=NROW(actual_data))
sse<-(actual_data-one_month_ahead_forecast$mean)^2
plot(c(input_data, one_month_ahead_forecast$mean),xlab = paste ("Time in", frequency ,y_lab , sep=" "), ylab=y_lab, type='l')
x1_test <- ts(actual_data, start=NROW(input_data)+1 )
lines(x1_test, col='red',lwd=2)
sse_vec<-c(sse_vec, sse)
}
# Data prep for VAR and VECM models
jun_actual_data<-cbind(DNC$Singapore[518:547], MUR$Singapore[518:547], GRI$Singapore[518:547], CHI$Singapore[518:547], ESI$Singapore[518:547])
jul_actual_data<-cbind(DNC$Singapore[548:578], MUR$Singapore[548:578], GRI$Singapore[548:578], CHI$Singapore[548:578], ESI$Singapore[548:578])
aug_actual_data<-cbind(DNC$Singapore[579:609], MUR$Singapore[579:609], GRI$Singapore[579:609], CHI$Singapore[579:609], ESI$Singapore[579:609])
sep_actual_data<-cbind(DNC$Singapore[610:639], MUR$Singapore[610:639], GRI$Singapore[610:639], CHI$Singapore[610:639], ESI$Singapore[610:639])
jun_forecast_input<-cbind(DNC$Singapore[1:517], MUR$Singapore[1:517], GRI$Singapore[1:517], CHI$Singapore[1:517], ESI$Singapore[1:517])
jul_forecast_input<-c(jun_forecast_input, jun_actual_data)
aug_forecast_input<-c(jul_forecast_input, jul_actual_data)
sep_forecast_input<-c(aug_forecast_input, aug_actual_data)
oct_forecast_input<-c(sep_forecast_input, sep_actual_data)
forecast_input_list<-list(jun_forecast_input, jul_forecast_input, aug_forecast_input, sep_forecast_input)
actual_data_list<-list(jun_actual_data, jul_actual_data, aug_actual_data, sep_actual_data)
SGdata = cbind(SGDNC, SGGRI, SGCHI, SGESI)
diff_SGdata = diff(SGdata)
dim(diff_SGdata)
#processing on data (input data)
rows <- NROW(diff_SGdata) # calculate number of rows in time series (number of days)
training_data<-diff_SGdata
MTSplot(training_data)
ccm(training_data)
m0$Mstat
names(m0)
m1=VAR(training_data, 8)
m2=refVAR(m1,thres=1.96)
MTSdiag(m1,adj=12)
# Testing Data Evaluation
for (i in 1:4){
input_data<-forecast_input_list[i][[1]]
SGdata.VAR <- VARselect(SGdata) #determining number of lags to be included in VAR model
nlags <- SGdata.VAR$selection["SC(n)"]
temp_model<-VAR(input_data, 2) # temp_model<- #Reuse existing var model here
actual_data<-actual_data_list[i][[1]]
one_month_ahead_forecast <- predict(temp_model, h=NROW(actual_data))
sse<-(actual_data-one_month_ahead_forecast$mean)^2
plot(c(input_data, one_month_ahead_forecast$mean),xlab = paste ("Time in", frequency ,y_lab , sep=" "), ylab=y_lab, type='l')
x1_test <- ts(actual_data, start=NROW(input_data)+1 )
lines(x1_test, col='red',lwd=2)
sse_vec<-c(sse_vec, sse)
}
MSE_Per_Day<-round(mean(sse_vec), 3)
forecasting_VAR <- VARpred(m1, N_forecasting_days+validation_data_days)
